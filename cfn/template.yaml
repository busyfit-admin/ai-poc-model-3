
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Environment:
    Type: String
    Description: Environment name (e.g., dev, prod)
  OpenAiLibLayerVersionArnSSMParameter:  # Deployed under SaaS Integrated APIS Lambda Layers
    Type: AWS::SSM::Parameter::Value<String>    
    Default: '/IntegratedAPIs/LambdaLayer/OpenAIRelatedLibLayerVersionArn'

Resources:
  InputS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub images-input-${Environment}
      LifecycleConfiguration:
        Rules:
          - Id: RemoveIncompleteMultiparts
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            Status: Enabled
          - Id: RemoveOldData
            ExpirationInDays: 10
            Status: Enabled
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt ProcessImagesQueue.Arn    
  
  PublicS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref InputS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::images-input-${Environment}/*'            

  ProcessedImagesBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'processed-images-${Environment}'    



  ProcessImagesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub 'process-images-queue-${Environment}'
      MessageRetentionPeriod: 1209600 # (14 days)
      VisibilityTimeout: 1000


  ProcessImagesQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessImagesQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ProcessImagesQueue.Arn
      
  
  ProductAttributesDynamodb:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub 'product-attributes-${Environment}'
      AttributeDefinitions:
        - AttributeName: 'ProductId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'ProductId'
          KeyType: 'HASH'
      BillingMode: "PAY_PER_REQUEST"
        


  ProcessImagesLambda:
    Type: AWS::Serverless::Function
    Properties: 
      Description: 'Process images from SQS'
      FunctionName: !Sub 'process-images-lambda-${Environment}'
      CodeUri: ../lambdas/image-classifier/
      Handler: ImageClassify.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.12'
      MemorySize: 2000
      Layers:
        - !Ref OpenAiLibLayerVersionArnSSMParameter # Ref to lambda_layers repo
      Timeout: 200
      Environment:
        Variables:
          OUTPUT_BUCKET: !Sub 'processed-images-${Environment}'
          DYNAMODB_TABLE_NAME: !Ref ProductAttributesDynamodb
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessImagesQueue.Arn

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'lambda-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'lambda-s3-access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::processed-images-${Environment}/*'
                  - !Sub 'arn:aws:s3:::images-input-${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt ProcessImagesQueue.Arn
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                Resource: !GetAtt ProductAttributesDynamodb.Arn  

